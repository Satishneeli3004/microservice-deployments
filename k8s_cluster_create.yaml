eksctl create cluster --name=my-eks8 \
                      --region=ap-southeast-2
                      --zones=ap-southeast-1a,ap-southeast-1b \
                      --without-nodegroup
#below this template has created withthe above coomand
---
AWSTemplateFormatVersion: 2010-09-09
Description: "EKS cluster (dedicated VPC: true, dedicated IAM: true) [created
  and managed by eksctl]"
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-iso:
      EC2: ec2.c2s.ic.gov
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-iso-b:
      EC2: ec2.sc2s.sgov.gov
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  ClusterSharedNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/ClusterSharedNodeSecurityGroup
      VpcId: VPC
  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true
      KubernetesNetworkConfig:
        IpFamily: ipv4
      Name: my-eks8
      ResourcesVpcConfig:
        EndpointPrivateAccess: false
        EndpointPublicAccess: true
        SecurityGroupIds:
          - ControlPlaneSecurityGroup
        SubnetIds:
          - SubnetPublicAPSOUTHEAST2C
          - SubnetPublicAPSOUTHEAST2A
          - SubnetPublicAPSOUTHEAST2B
          - SubnetPrivateAPSOUTHEAST2C
          - SubnetPrivateAPSOUTHEAST2A
          - SubnetPrivateAPSOUTHEAST2B
      RoleArn:
        - ServiceRole
        - Arn
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/ControlPlane
      Version: "1.27"
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/ControlPlaneSecurityGroup
      VpcId: VPC
  IngressDefaultClusterToNodeSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow managed and unmanaged nodes to communicate with each other
        (all ports)
      FromPort: 0
      GroupId: ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        - ControlPlane
        - ClusterSecurityGroupId
      ToPort: 65535
  IngressInterNodeGroupSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId: ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: ClusterSharedNodeSecurityGroup
      ToPort: 65535
  IngressNodeToDefaultClusterSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId:
        - ControlPlane
        - ClusterSecurityGroupId
      IpProtocol: "-1"
      SourceSecurityGroupId: ClusterSharedNodeSecurityGroup
      ToPort: 65535
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/InternetGateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        - NATIP
        - AllocationId
      SubnetId: SubnetPublicAPSOUTHEAST2C
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/NATGateway
  NATIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/NATIP
  NATPrivateSubnetRouteAPSOUTHEAST2A:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: NATGateway
      RouteTableId: PrivateRouteTableAPSOUTHEAST2A
  NATPrivateSubnetRouteAPSOUTHEAST2B:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: NATGateway
      RouteTableId: PrivateRouteTableAPSOUTHEAST2B
  NATPrivateSubnetRouteAPSOUTHEAST2C:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: NATGateway
      RouteTableId: PrivateRouteTableAPSOUTHEAST2C
  PolicyCloudWatchMetrics:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - cloudwatch:PutMetricData
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: ${AWS::StackName}-PolicyCloudWatchMetrics
      Roles:
        - ServiceRole
  PolicyELBPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeAccountAttributes
              - ec2:DescribeAddresses
              - ec2:DescribeInternetGateways
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: ${AWS::StackName}-PolicyELBPermissions
      Roles:
        - ServiceRole
  PrivateRouteTableAPSOUTHEAST2A:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/PrivateRouteTableAPSOUTHEAST2A
      VpcId: VPC
  PrivateRouteTableAPSOUTHEAST2B:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/PrivateRouteTableAPSOUTHEAST2B
      VpcId: VPC
  PrivateRouteTableAPSOUTHEAST2C:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/PrivateRouteTableAPSOUTHEAST2C
      VpcId: VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/PublicRouteTable
      VpcId: VPC
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: InternetGateway
      RouteTableId: PublicRouteTable
    DependsOn:
      - VPCGatewayAttachment
  RouteTableAssociationPrivateAPSOUTHEAST2A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: PrivateRouteTableAPSOUTHEAST2A
      SubnetId: SubnetPrivateAPSOUTHEAST2A
  RouteTableAssociationPrivateAPSOUTHEAST2B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: PrivateRouteTableAPSOUTHEAST2B
      SubnetId: SubnetPrivateAPSOUTHEAST2B
  RouteTableAssociationPrivateAPSOUTHEAST2C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: PrivateRouteTableAPSOUTHEAST2C
      SubnetId: SubnetPrivateAPSOUTHEAST2C
  RouteTableAssociationPublicAPSOUTHEAST2A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: PublicRouteTable
      SubnetId: SubnetPublicAPSOUTHEAST2A
  RouteTableAssociationPublicAPSOUTHEAST2B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: PublicRouteTable
      SubnetId: SubnetPublicAPSOUTHEAST2B
  RouteTableAssociationPublicAPSOUTHEAST2C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: PublicRouteTable
      SubnetId: SubnetPublicAPSOUTHEAST2C
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - - ServicePrincipalPartitionMap
                  - AWS::Partition
                  - EKS
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:${AWS::Partition}:iam::aws:policy/AmazonEKSVPCResourceController
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/ServiceRole
  SubnetPrivateAPSOUTHEAST2A:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 192.168.128.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: Name
          Value: ${AWS::StackName}/SubnetPrivateAPSOUTHEAST2A
      VpcId: VPC
  SubnetPrivateAPSOUTHEAST2B:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2b
      CidrBlock: 192.168.160.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: Name
          Value: ${AWS::StackName}/SubnetPrivateAPSOUTHEAST2B
      VpcId: VPC
  SubnetPrivateAPSOUTHEAST2C:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2c
      CidrBlock: 192.168.96.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: Name
          Value: ${AWS::StackName}/SubnetPrivateAPSOUTHEAST2C
      VpcId: VPC
  SubnetPublicAPSOUTHEAST2A:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 192.168.32.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value: ${AWS::StackName}/SubnetPublicAPSOUTHEAST2A
      VpcId: VPC
  SubnetPublicAPSOUTHEAST2B:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2b
      CidrBlock: 192.168.64.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value: ${AWS::StackName}/SubnetPublicAPSOUTHEAST2B
      VpcId: VPC
  SubnetPublicAPSOUTHEAST2C:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2c
      CidrBlock: 192.168.0.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value: ${AWS::StackName}/SubnetPublicAPSOUTHEAST2C
      VpcId: VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: ${AWS::StackName}/VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: InternetGateway
      VpcId: VPC
Outputs:
  ARN:
    Value:
      - ControlPlane
      - Arn
    Export:
      Name: ${AWS::StackName}::ARN
  CertificateAuthorityData:
    Value:
      - ControlPlane
      - CertificateAuthorityData
  ClusterSecurityGroupId:
    Value:
      - ControlPlane
      - ClusterSecurityGroupId
    Export:
      Name: ${AWS::StackName}::ClusterSecurityGroupId
  ClusterStackName:
    Value: AWS::StackName
  Endpoint:
    Value:
      - ControlPlane
      - Endpoint
    Export:
      Name: ${AWS::StackName}::Endpoint
  FeatureNATMode:
    Value: Single
  SecurityGroup:
    Value: ControlPlaneSecurityGroup
    Export:
      Name: ${AWS::StackName}::SecurityGroup
  ServiceRoleARN:
    Value:
      - ServiceRole
      - Arn
    Export:
      Name: ${AWS::StackName}::ServiceRoleARN
  SharedNodeSecurityGroup:
    Value: ClusterSharedNodeSecurityGroup
    Export:
      Name: ${AWS::StackName}::SharedNodeSecurityGroup
  SubnetsPrivate:
    Value:
      - ","
      - - SubnetPrivateAPSOUTHEAST2C
        - SubnetPrivateAPSOUTHEAST2A
        - SubnetPrivateAPSOUTHEAST2B
    Export:
      Name: ${AWS::StackName}::SubnetsPrivate
  SubnetsPublic:
    Value:
      - ","
      - - SubnetPublicAPSOUTHEAST2C
        - SubnetPublicAPSOUTHEAST2A
        - SubnetPublicAPSOUTHEAST2B
    Export:
      Name: ${AWS::StackName}::SubnetsPublic
  VPC:
    Value: VPC
    Export:
      Name: ${AWS::StackName}::VPC
